import express from "express";
import dotenv from "dotenv";
import bodyParser from "body-parser";
import nodemailer from "nodemailer";
import fetch from "node-fetch";
import path from "path";
import { fileURLToPath } from "url";

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

// Fix for ES modules path resolution
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, "public")));

// =========================
// Route: AI Summarization
// =========================
app.post("/api/summarize", async (req, res) => {
  try {
    const { transcript, prompt } = req.body;

    const response = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.GROQ_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "mixtral-8x7b-32768",
        messages: [
          { role: "system", content: "You are an AI assistant that summarizes meeting transcripts." },
          { role: "user", content: `Transcript:\n${transcript}\n\nInstruction: ${prompt}` }
        ],
        temperature: 0.5
      })
    });

    const data = await response.json();
    const summary = data.choices[0].message.content;
    res.json({ summary });

  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Summarization failed" });
  }
});

// =========================
// Route: Email Sharing
// =========================
app.post("/api/send-email", async (req, res) => {
  try {
    const { summary, recipients } = req.body;

    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });

    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: recipients,
      subject: "Meeting Summary",
      text: summary
    });

    res.json({ message: "Email sent successfully!" });

  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Email sending failed" });
  }
});

// =========================
// Start Server
// =========================
app.listen(PORT, () => {
  console.log(`âœ… Server running at http://localhost:${PORT}`);
});
